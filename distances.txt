%List of all possible routes with fact route(X,Y,Distance/Cost(in Km))
route(aberaeron, aberystwyth, 27). 
route(aberystwyth, aberaeron, 27). 

route(aberaeron, aberteifi, 35). 
route(aberteifi, aberaeron, 35). 

route(aberaeron, lampeter, 22). 
route(lampeter, aberaeron, 22). 

route(abergavenny, brecon, 42). 
route(brecon, abergavenny, 42). 

route(abergavenny, merthyr_tudful, 35). 
route(merthyr_tudful, abergavenny, 35). 

route(aberteifi, fishguard, 33). 
route(fishguard, aberteifi, 33). 

route(aberteifi, newcastle_emlyn, 17). 
route(newcastle_emlyn, aberteifi, 17). 

route(aberystwyth, machynlleth, 30). 
route(machynlleth, aberystwyth, 30). 

route(aberystwyth, rhayader, 46). 
route(rhayader, aberystwyth, 46). 

route(bala, corwen, 15). 
route(corwen, bala, 15). 

route(bala, dolgellau, 25). 
route(dolgellau, bala, 25). 

route(bala, llandudno, 53). 
route(llandudno, bala, 53). 

route(bangor, holyhead, 40). 
route(holyhead, bangor, 40). 

route(bangor, llandudno, 35). 
route(llandudno, bangor, 35). 

route(bangor, porthmadog, 45). 
route(porthmadog, bangor, 45). 

route(brecon, builth, 26). 
route(builth, brecon, 26). 

route(brecon, hay, 25). 
route(hay, brecon, 25). 

route(brecon, llandovery, 28). 
route(llandovery, brecon, 28). 

route(brecon, merthyr_tudful, 30). 
route(merthyr_tudful, brecon, 30). 

route(brynaman, carmarthen, 35). 
route(carmarthen, brynaman, 35). 

route(brynaman, glynneath, 30). 
route(glynneath, brynaman, 30). 

route(builth, hay, 27). 
route(hay, builth, 27). 

route(builth, llandovery, 28). 
route(llandovery, builth, 28). 

route(built, llandrindod, 16). 
route(llandrindod, built, 16). 

route(builth, rhayader, 18). 
route(rhayader, builth, 18). 

route(carmarthen, newcastle_emlyn, 28). 
route(newcastle_emlyn, carmarthen, 28). 

route(chester, corwen, 44). 
route(corwen, chester, 44). 

route(chester, rhyl, 46). 
route(rhyl, chester, 46). 

route(chester, wrecsam, 16). 
route(wrecsam, chester, 16). 

route(corwen, oswestry, 33). 
route(oswestry, corwen, 33). 

route(dolgellau, machynlleth, 32). 
route(machynlleth, dolgellau, 32). 

route(dolgellau, porthmadog, 31). 
route(porthmadog, dolgellau, 31). 

route(fishguard, st_davids, 27). 
route(st_davids, fishguard, 27). 

route(glynneath, merthyr_tudful, 22). 
route(merthyr_tudful, glynneath, 22). 

route(hay, presteigne, 27). 
route(presteigne, hay, 27). 

route(lampeter, llandovery, 33). 
route(llandovery, lampeter, 33). 

route(lampeter, newcastle_emlyn, 37). 
route(newcastle_emlyn, lampeter, 37). 

route(llandrindod, presteigne, 23). 
route(presteigne, llandrindod, 23). 

route(llandrindod, rhayader, 17). 
route(rhayader, llandrindod, 17). 

route(llandrindod, newtown, 32). 
route(newtown, llandrindod, 32). 

route(llandudno, rhyl, 27). 
route(rhyl, llandudno, 27). 

route(llanidloes, newtown, 18). 
route(newtown, llanidloes, 18). 

route(llanidloes, rhayader, 20). 
route(rhayader, llanidloes, 20). 

route(knighton, welshpool, 35). 
route(welshpool, knighton, 35). 

route(knighton, presteigne, 12). 
route(presteigne, knighton, 12). 

route(machynlleth, newtown, 45). 
route(newtown, machynlleth, 45). 

route(newtown, welshpool, 25). 
route(welshpool, newtown, 25). 

route(oswestry, welshpool, 29). 
route(welshpool, oswestry, 29). 

route(oswestry, wrecsam, 24). 
route(wrecsam, oswestry, 24).


path(X,X,Distance,[X],H) :- %Base case for any station to the same station. path(StationX, StationX, Distance, [StationName/stop], Number of times its moved).
    H >= 0, Distance is 0.
%Not necessarily needed but good to cover in case of any cases where the station is going to the same station


%the main path method. Covers any normal destination path(StationX, StationY, Distance, [StationX|StationName/stops], Number of times hopped between stations).
path(X,Y,Distance,[X|Stops],H) :- 
    %checks to make sure the remaining number of stops is more than 1.
    H > 1,
    %if so it creates a route with a station X and then Station Z a third station differing from station Y to calc the distance using a new varaible distance1
    route(X,Z,Distance1),
    %H1 is now the number of stops allowed -1.
    H1 is H-1, 
    %calls itself again but with station Z instead of Station X, distance2 instead of distance1 and H1 instead of H. This allows it to search through all possible solutions.
    path(Z,Y,Distance2,Stops,H1), 
    %Calaculates the total Distance cost using Distance1 and Distance2 Distance1 is X-Z and Distance2 is Z to Y.
    Distance is Distance1+Distance2.

findPath(X,Y,Distance,Stops,H) :- %Base case if theres a single path between StationX and StationY findPath(StationX, StationY, Distance, Stops, Number of hops)
    path(X,Y,Distance,Stops,H). %calls path once as there would be a single path between X and Y.

%Recursive find path call. 
findPath(X,Y,Distance,Stops,H) :- 
    H1 is H+1,
    %Calls itself with H1 which is H+1, allowing there to be one more stop to find the path between X and Y. When would then start the process to recursively call the path.
    findPath(X,Y,Distance,Stops,H1).

%Base case for a single stop. Checks if the path distance is bounded within a certain limit set by L (Length). 
pathBound(X,Y,Distance,Stops,L) :-
    %checks if there is a direct route.
    route(X,Y,D),
    %if so checks if D < L. 
    D < L,
    %if that passes then distance is set to D.
    Distance is D,
    %sets the stops to X and Y station
    Stops = [X,Y].

%Recurisve version of pathBound call.
pathBound(X,Y,Distance,Stops,L) :- 
    %checks to make sure L isnt negative. if it is. it means that the current branch is exceding the maximum allowed distance
    L >=0,
    %calls route with station X and Z, similar to the recursive version of Path.
    route(X,Z,Distance1),
    %L1 becomes L - the distance between station X and Z
    L1 is L - Distance1,
    %calling itself again but with station Z and Y, and then Distane2, Stops2 and L1
    pathBound(Z,Y,Distance2,Stops2,L1),
    %adds up the total distance
    Distance is Distance1 + Distance2,
    %Sets X and accumlated stops from station Z via Stops2.
    Stops = [X|Stops2].

%Main rule/predicate. Finds the stops and stations between X and Y
distance(X,Y,Distance, Stops) :-
    %calls findPath to find the path between X and Y, adding stops in between
    findPath(X,Y,Distance,Stops,0),
    %checks if the path found is bound by the limit set in PathBound. 
    \+ pathBound(X,Y,_,_,Distance).

